name: Crawl

on:
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

jobs:
  crawl:
    permissions:
      contents: read
    name: 🕷️ Crawl
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      # GitHub's Ubuntu runner images already include node.js, but
      # we install it here so we'll be running with a consistent
      # know version.
      - name: 🛠️ Install node
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8  # v4.0.1
        with: 
          node-version: 18

      - name: 📦 Install App Dependencies
        run: npm install

      - name: ⚙️ Instrument App with Assess
        run: npm install @contrast/agent

      - name: 🪛 Install Agent Configs
        run: |
          cp ./contrast-crawler/resources/contrast_security.yaml ./contrast_security.yaml

      - name: 🚀 Start the test app
        id: start-app
        run: |
          node -r @contrast/agent build/app > app.log 2>&1 &
          test_app_pid=$!
          echo "test_app_pid = ${test_app_pid}"
          echo "test_app_pid=$test_app_pid" >> $GITHUB_OUTPUT
        env:
           CONTRAST__API__URL: ${{ vars.CONTRAST__API__URL }}
           CONTRAST__API__USER_NAME: ${{ vars.CONTRAST__API__USER_NAME }}
           CONTRAST__API__API_KEY: ${{ secrets.CONTRAST__API__API_KEY }}
           CONTRAST__API__SERVICE_KEY: ${{ secrets.CONTRAST__API__SERVICE_KEY }}

      - name: 🔭 Wait for it to be ready
        run: |
          if grep -q "Server listening on port" <(timeout 60s tail -f app.log)
          then  
            echo "Server ready"
          else
            echo "Timeout waiting for server."
            exit 1
          fi

      - name: 🧑‍💻 Make an App Request
        # to register the app (if necessary) and wait for TS to receive and process
        run: |
          curl http://localhost:3000
          sleep 60s
          cat app.log

      # If the application under test were not a node.js app
      # Then we would include something like the step
      #   🛠️ Install node
      # here to support the crawler application

      - name: 📦 Install the Contrast Crawler
        run: npm install -g @contrast/crawler

      - name: 📝 Register a user
        run: npx @contrast/crawler ./contrast-crawler/resources/crawler.yaml script=./contrast-crawler/resources/juice-shop-prep.js
        env:
           CONTRAST__CRAWLER__USER_API__URL:          ${{ vars.CONTRAST__CRAWLER__USER_API__URL }}
           CONTRAST__CRAWLER__USER_API__ORG_ID:       ${{ vars.CONTRAST__CRAWLER__USER_API__ORG_ID }}
           CONTRAST__CRAWLER__USER_API__USER_NAME:    ${{ vars.CONTRAST__CRAWLER__USER_API__USER_NAME }}
           CONTRAST__CRAWLER__USER_API__API_KEY:      ${{ secrets.CONTRAST__CRAWLER__USER_API__API_KEY }}
           CONTRAST__CRAWLER__USER_API__SERVICE_KEY:  ${{ secrets.CONTRAST__CRAWLER__USER_API__SERVICE_KEY }}

      - name: 🕷️ Crawl the app
        run: npx @contrast/crawler ./contrast-crawler/resources/crawler.yaml
        env:
           CONTRAST__CRAWLER__USER_API__URL:          ${{ vars.CONTRAST__CRAWLER__USER_API__URL }}
           CONTRAST__CRAWLER__USER_API__ORG_ID:       ${{ vars.CONTRAST__CRAWLER__USER_API__ORG_ID }}
           CONTRAST__CRAWLER__USER_API__USER_NAME:    ${{ vars.CONTRAST__CRAWLER__USER_API__USER_NAME }}
           CONTRAST__CRAWLER__USER_API__API_KEY:      ${{ secrets.CONTRAST__CRAWLER__USER_API__API_KEY }}
           CONTRAST__CRAWLER__USER_API__SERVICE_KEY:  ${{ secrets.CONTRAST__CRAWLER__USER_API__SERVICE_KEY }}

      - name: ⬆️ Upload crawl artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        with:
          name: Crawl Artifacts
          path: storage/**/*
          retention-days: 14

      - name: 🪓 Kill the server
        run: |
          test_app_pid=${{ steps.start-app.outputs.test_app_pid }}
          echo "test_app_pid=$test_app_pid"
          echo "Killing server."
          kill $test_app_pid
        